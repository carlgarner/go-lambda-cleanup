name: Test

on:
  push:
    branches-ignore: [ main ]
  # pull_request:
  #   branches: [ main ]
env:
  GITHUB_TOKEN: ${{ github.token }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  LINT_VERSION: "1.25.1"

permissions: 
  contents: read
  packages: write

jobs:
  test:
    outputs:
      VERSION: ${{ steps.go.outputs.version }}
    name: Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go
      uses: actions/setup-go@v1.1.3
      with:
        go-version: 1.18
      id: go

    - name: Setup nodeJs
      uses: actions/setup-node@v1.4.4
      with:
        node-version: '14'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    -
      name: "Get dependencies"
      id: dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
          echo "Installing npm dependencies"
          npm install @semantic-release/exec -D
          npm install @semantic-release/changelog -D
          npx semantic-release --dry-run
          echo "export VERSION=1.0.13" > VERSION.env
          cat VERSION.env
          source VERSION.env
          echo "::set-output name=version::$VERSION"

    - name: Generate AWS region file
      run: |
        aws ec2 describe-regions --region us-east-1 --query "Regions[].RegionName" --output text >> cmd/aws-regions.txt

    # - name: Run golangci-lint
    #   uses: golangci/golangci-lint-action@v3.1.0
    #   with:  
    #     args: -v

    
    # - name: Execute Go tests
    #   run: go test -v ./...

    # - name: Test CLI
    #   run: |
    #     FILE=./VERSION.env
    #     npm install @semantic-release/exec -D
    #     npm install @semantic-release/changelog -D
    #     npx semantic-release --dry-run
    #     if [ -f "$FILE" ]; then
    #         cat VERSION.env
    #         source VERSION.env
    #     fi
    #     go test -coverprofile=go.txt -v ./...
    #     go run main.go clean -r us-west-2
    #     go run main.go version
  
    # - name: build & execute
    #   run: |
    #     echo "--------------------------------------------------"
    #     go build -ldflags="-X 'github.com/karl-cardenas-coding/go-lambda-cleanup/cmd.VersionString=$VERSION'" -o=glc -v
    #     ./glc clean -r us-west-2


    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    -  name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v2


    - name: Login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}


    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/${{ github.repository }}:${{steps.dependencies.outputs.VERSION}}

    - uses: actions/upload-artifact@v1
      with:
        name: test-results
        path: go.txt